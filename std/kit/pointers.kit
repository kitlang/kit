/**
 * A typesafe nullable pointer.
 */
abstract Null[T]: Ptr[T] {
    rules {
        (this as Ptr[T]);
        ((x: T) as Null[T]) => (&x);

        (this.isNull()) => (this as Ptr[T]) == 0;
        (null : Null[T]) => 0;

        (*this) => if this.isNull() {
            throw NullIdentifierError;
        } else {
            *(this as Ptr[T]);
        }

        (this ?? (other: Ptr[T])) => if this.isNull() {
            other;
        } else {
            this;
        }

        (this ?. $id) => if this.isNull() {
            null;
        } else {
            (*this).$id;
        }
    }
}

/**
 * A smart pointer to type T. When this pointer goes out of scope, the
 * memory will be reclaimed immediately.
 */
abstract Unique[T]: Ptr[T] {
    rules {
        ((_:Ptr[T]) as Self);

        // assignment of this value to a pointer generates a weak reference
        ((x: Ptr[T]) = this) => x = this.weak();
    }

    public function delete();

    // /**
    //  * Obtain a weak reference to the underlying value. When the unique pointer
    //  * is destroyed, this reference will no longer be valid.
    //  */
    // public function weak(): Weak[T] {
    //     return (this as Ptr[T]) as Weak[T];
    // }
}

/**
 * A smart pointer to type T that employs reference counting. Call `ref()` to
 * obtain an additional reference; when all references go out of scope, the
 * memory will be reclaimed immediately.
 */
struct Shared[T] {
    var rc: Ptr[Uint] = &1;
    var value: Ptr[T];

    rules {
        (this as T) => this.value;
        (this.$x) => this.value.$x;

        // assignment of this value to a pointer generates a weak reference
        ((x: Ptr[T]) = this) => x = this.weak();

        (*this) => (*this.value);
    }

    public static function new(value: Ptr[T]) {
        return struct Self {value};
    }

    /**
     * Obtain a new reference and increment the reference count.
     */
    public function ref(): Shared[T] {
        ++rc;
        return this;
    }

    /**
     * Obtain a weak reference without incrementing the reference count.
     */
    public function weak(): Weak[T] {
        return value;
    }
}

// implement Drop for Shared[T] {
//     public function drop() {
//         --rc;
//         if rc <= 0 {
//             // TODO
//             // delete rc;
//             // delete value;
//         }
//     }
// }

/**
 * A weak reference to a value of type T.
 */
abstract Weak[T]: Ptr[T] {
    rules {
        ((_:Ptr[T]) as Self);
    }
}
