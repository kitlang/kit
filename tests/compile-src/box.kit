struct MyStruct {
    public var a: Int32;
    public var b: Float;
}

trait Greeter {
    public function greet(): Void;
}

implement Greeter for Int32 {
    public function greet() {
        printf("Hello from Int %i\n", this);
    }
}

implement Greeter for Int64 {
    public function greet() {
        // FIXME: needs PRId64, but no way to represent that in Kit
        printf("Hellooo from Int64 %lli\n", this);
    }
}

implement Greeter for Float32 {
    public function greet() {
        printf("Howdy from Float %.2f\n", this);
    }
}

implement Greeter for MyStruct {
    public function greet() {
        printf("Hey from MyStruct\n");
        greet(this.a);
        greet(this.b);
    }
}

implement Greeter for Bool {
    public function greet() {
        if this {
            printf("yep\n");
        } else {
            printf("nope\n");
        }
    }
}

implement Greeter for (Int, Int) {
    public function greet() {
        printf("hello from two ints: (%i, %i)\n", this[0], this[1]);
    }
}

function greet(x: Box[Greeter]) {
    x.greet();
}

function main() {
    var a: Int32 = 1;
    var x: Box[Greeter] = a;
    greet(x);

    var b = 7_i32;
    greet(b);
    greet(5_f32);
    greet(10000000000000_i64);

    greet(struct MyStruct {a: 100, b: 3.14});

    greet(true);
    greet(false);

    greet((3_i, 5_i));
}
